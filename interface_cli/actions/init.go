package actions

import (
	"fmt"
	"strings"

	"github.com/darklab8/autogit/v2/settings"
	"github.com/darklab8/autogit/v2/settings/logus"
	"github.com/darklab8/autogit/v2/settings/types"

	"github.com/darklab8/go-utils/utils"
)

const (
	InitAdvice string = "activate commit msg hook with `autogit hook activate [--global]`"
)

func init_write_config(config_path types.ConfigPath) {
	if utils.FileExists(config_path.ToFilePath()) {
		logus.Log.Fatal("file with settings already exists", logus.ConfigPath(config_path))
		return
	}

	config_lines := strings.Split(settings.ConfigExample, "\n")
	for i, line := range config_lines {
		config_lines[i] = fmt.Sprintf("# %s", line)
	}
	config_lines = append([]string{fmt.Sprintf("# Generated by %s version: %s", settings.ToolName, settings.GetAutogitVersion())}, config_lines...)
	commented_out_config := strings.Join(config_lines, "\n")

	utils.NewWriteFile(config_path.ToFilePath(), func(file *utils.FileWrite) {
		file.WritelnF(commented_out_config)
	})

	logus.Log.Info("Succesfully created settings in location", logus.ConfigPath(config_path))
	logus.Log.Info("Try to " + InitAdvice + ". It will automatically verify committs for you!")
}

func Initialize(init_globally bool) {
	config_path := settings.GetProjectConfigPath()
	if init_globally {
		config_path = settings.GetGlobalConfigPath()
	}
	init_write_config(config_path)
}
